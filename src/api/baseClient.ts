import axios, { type AxiosInstance, type AxiosRequestConfig, type AxiosResponse, type InternalAxiosRequestConfig } from 'axios';

const API_CONFIG = {
  BASE_URL: 'http://localhost:8000/api/v1',
  TIMEOUT: 2000
}

// –¢–∏–ø—ã –¥–ª—è –æ—à–∏–±–æ–∫ API
export interface ApiError {
  message: string;
  code: string;
  status: number;
  timestamp?: string;
}

export interface ApiResponse<T = any> {
  data: T;
  status: number;
  message?: string;
}

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–∞–∑–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
class BaseApiClient {
  private client: AxiosInstance;
  private baseURL: string;

  constructor(baseURL?: string) {
    this.baseURL = baseURL || API_CONFIG.BASE_URL;
    
    this.client = axios.create({
      baseURL: this.baseURL,
      timeout: API_CONFIG.TIMEOUT,
      headers: {
        'Content-Type': 'application/json',
      },
    });

    this.setupInterceptors();
  }

  // –ò–Ω—Ç–µ—Ä—Ü–µ–ø—Ç–æ—Ä—ã –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤
  private setupInterceptors(): void {
    // Request interceptor
    this.client.interceptors.request.use(
      (config: InternalAxiosRequestConfig) => {
        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
        const token = this.getAuthToken();
        if (token && config.headers) {
          config.headers.Authorization = `Bearer ${token}`;
        }

        // –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å—ã –≤ development
        if (import.meta.env.DEV) {
          console.log(`üîÑ API Request: ${config.method?.toUpperCase()} ${config.url}`, config.data || '');
        }

        return config;
      },
      (error) => {
        console.error('‚ùå API Request Error:', error);
        return Promise.reject(this.normalizeError(error));
      }
    );

    // Response interceptor
    this.client.interceptors.response.use(
      (response: AxiosResponse) => {
        // –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –≤ development
        if (import.meta.env.DEV) {
          console.log(`‚úÖ API Response: ${response.status} ${response.config.url}`, response.data);
        }

        return response;
      },
      (error) => {
        const normalizedError = this.normalizeError(error);
        
        // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
        console.error('‚ùå API Response Error:', normalizedError);

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã
        if (error.response?.status === 401) {
          this.handleUnauthorized();
        }

        return Promise.reject(normalizedError);
      }
    );
  }

  // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –æ—à–∏–±–æ–∫
  private normalizeError(error: any): ApiError {
    if (axios.isAxiosError(error)) {
      return {
        message: error.response?.data?.message || error.message || 'Network Error',
        code: error.response?.data?.code || error.code || 'UNKNOWN_ERROR',
        status: error.response?.status || 0,
        timestamp: new Date().toISOString(),
      };
    }

    return {
      message: error?.message || 'Unknown error occurred',
      code: 'UNKNOWN_ERROR',
      status: 0,
      timestamp: new Date().toISOString(),
    };
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (–º–æ–∂–Ω–æ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å)
  protected getAuthToken(): string | null {
    return localStorage.getItem('auth_token');
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ 401 –æ—à–∏–±–∫–∏
  private handleUnauthorized(): void {
    // –û—á–∏—â–∞–µ–º —Ç–æ–∫–µ–Ω –∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ª–æ–≥–∏–Ω–∞
    localStorage.removeItem('auth_token');
    window.location.href = '/login';
  }

  // –ë–∞–∑–æ–≤—ã–µ HTTP –º–µ—Ç–æ–¥—ã
  public async get<T = any>(
    url: string, 
    config?: AxiosRequestConfig
  ): Promise<ApiResponse<T>> {
    const response = await this.client.get<T>(url, config);
    return {
      data: response.data,
      status: response.status,
    };
  }

  public async post<T = any>(
    url: string, 
    data?: any, 
    config?: AxiosRequestConfig
  ): Promise<ApiResponse<T>> {
    const response = await this.client.post<T>(url, data, config);
    return {
      data: response.data,
      status: response.status,
    };
  }

  public async put<T = any>(
    url: string, 
    data?: any, 
    config?: AxiosRequestConfig
  ): Promise<ApiResponse<T>> {
    const response = await this.client.put<T>(url, data, config);
    return {
      data: response.data,
      status: response.status,
    };
  }

  public async patch<T = any>(
    url: string, 
    data?: any, 
    config?: AxiosRequestConfig
  ): Promise<ApiResponse<T>> {
    const response = await this.client.patch<T>(url, data, config);
    return {
      data: response.data,
      status: response.status,
    };
  }

  public async delete<T = any>(
    url: string, 
    config?: AxiosRequestConfig
  ): Promise<ApiResponse<T>> {
    const response = await this.client.delete<T>(url, config);
    return {
      data: response.data,
      status: response.status,
    };
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
  public async upload<T = any>(
    url: string,
    formData: FormData,
    onUploadProgress?: (progressEvent: any) => void
  ): Promise<ApiResponse<T>> {
    const response = await this.client.post<T>(url, formData, {
      headers: {
        'Content-Type': 'multipart/form-data',
      },
      onUploadProgress,
    });

    return {
      data: response.data,
      status: response.status,
    };
  }

  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–∞–∑–æ–≤–æ–≥–æ URL
  public setBaseURL(baseURL: string): void {
    this.client.defaults.baseURL = baseURL;
    this.baseURL = baseURL;
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ axios (–¥–ª—è –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤)
  public getAxiosInstance(): AxiosInstance {
    return this.client;
  }
}

export const baseApiClient = new BaseApiClient();
export default BaseApiClient;